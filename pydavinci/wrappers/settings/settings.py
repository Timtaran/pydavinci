# generated by datamodel-codegen:
#   filename:  settings.py
#   timestamp: 2022-04-27T02:50:45+00:00
# type: ignore

import orjson
from typing import TYPE_CHECKING, TypeVar, NewType, Optional
from typing_extensions import TypeAlias, Annotated, Literal
from pydantic import BaseModel, Field, root_validator, validator, DirectoryPath, conint
from pydavinci.wrappers.settings.map_project import SETTINGS_MAP, super_scale_reverse
from pathlib import Path
import inspect

if TYPE_CHECKING:
    from pydantic.fields import ModelField

from pydavinci import davinci

resolve = davinci.Resolve()


StillsNamingPattern = Literal[
    "clipName",
    "versionName",
    "sourceTimecode",
    "timelineTimecode",
    "timelineName",
    "displayLUTName",
    "customLabel",
]

ColorScienceMode = Literal["davinciYRGB", "davinciYRGBColorManagedv2", "acescc", "acescct"]

ImageResizeMode = Literal[
    "smoother",
    "bicubic",
    "bilinear",
    "sharper",
    "box",
    "catrom",
    "cubic",
    "gaussian",
    "lanczos",
    "linear",
    "mitchell",
    "nearestNeighbor",
    "quadratic",
    "sinc",
]

OptimizedCodecs = Literal[
    "rgb",
    "dnxhd_444_12b",
    "dnxhd_hqx_12b",
    "dnxhd_hq",
    "dnxhd_sq",
    "dnxhd_lb",
    "CFHDb64a",
    "CFHDv210",
]


CaptureCodecs = Literal[
    "rgb",
    "dnxhd_720p145",
    "dnxhd_720p220",
    "dnxhd_720p220X",
    "dnxhd_1080i145",
    "dnxhd_1080i220",
    "dnxhd_1080i220X",
    "dnxhd_1080p36",
    "dnxhd_1080p145",
    "dnxhd_1080p220",
    "dnxhd_1080p220X",
    "dnxhd_1080p440X",
    "r210",
    "yuv",
    "v210 ",
]


def set_setting(name, value=None):
    if name == "superScale":
        return super_scale_reverse(value)
    if value:
        print("ta coisando")
        resolve.project.set_setting(name, value)
        return value
    else:
        return


# fmt: off
class BaseConfig(BaseModel):
    
    class Config:
        # arbitrary_types_allowed = True
        validate_assignment = True
        allow_population_by_field_name = True    # return s(field.alias, call(value))


class ProjectUniqueSettings(BaseConfig):
    audio_capture_num_channels: conint(ge=2, le=16, multiple_of=2) = Field(..., alias="audioCaptureNumChannels")
    audio_output_has_timecode: bool = Field(..., alias="audioOutputHasTimecode")
    audio_playout_num_channels: conint(ge=2, le=16, multiple_of=2) = Field(..., alias="audioPlayoutNumChannels")
    color_aces_gamut_compress_type: Optional[Literal["ACES reference gamut compress"]] = Field(..., alias="colorAcesGamutCompressType")
    color_aces_idt: str = Field(..., alias="colorAcesIDT")
    color_aces_node_lut_processing_space: Literal["acesAp0Linear", "acesccAp1"] = Field(..., alias="colorAcesNodeLUTProcessingSpace")
    color_aces_odt: str = Field(..., alias="colorAcesODT")
    color_gallery_stills_location: DirectoryPath = Field(..., alias="colorGalleryStillsLocation")
    color_gallery_stills_naming_custom_pattern: Optional[str] = Field(..., alias="colorGalleryStillsNamingCustomPattern")
    color_gallery_stills_naming_enabled: bool = Field(..., alias="colorGalleryStillsNamingEnabled")
    color_gallery_stills_naming_pattern: StillsNamingPattern = Field(..., alias="colorGalleryStillsNamingPattern")
    color_gallery_stills_naming_with_still_number: Literal["off", "suffix", "prefix"] = Field(..., alias="colorGalleryStillsNamingWithStillNumber")
    color_keyframe_dynamics_end_profile: conint(ge=0, le=11) = Field(..., alias="colorKeyframeDynamicsEndProfile")
    color_keyframe_dynamics_start_profile: conint(ge=0, le=11) = Field(..., alias="colorKeyframeDynamicsStartProfile")
    color_luminance_mixer_default_zero: bool = Field(..., alias="colorLuminanceMixerDefaultZero")
    color_science_mode: ColorScienceMode = Field(..., alias="colorScienceMode")
    color_space_input: str = Field(..., alias="colorSpaceInput")
    color_space_input_gamma: str = Field(..., alias="colorSpaceInputGamma")
    color_space_output: str = Field(..., alias="colorSpaceOutput")
    color_space_output_gamma: str = Field(..., alias="colorSpaceOutputGamma")
    color_space_output_gamut_mapping: str = Field(..., alias="colorSpaceOutputGamutMapping")
    color_space_output_gamut_saturation_knee: float = Field(..., alias="colorSpaceOutputGamutSaturationKnee")
    color_space_output_gamut_saturation_max: str = Field(..., alias="colorSpaceOutputGamutSaturationMax")
    color_space_output_tone_luminance_max: int = Field(..., alias="colorSpaceOutputToneLuminanceMax")
    color_space_output_tone_mapping: str = Field(..., alias="colorSpaceOutputToneMapping")
    color_space_timeline: str = Field(..., alias="colorSpaceTimeline")
    color_space_timeline_gamma: str = Field(..., alias="colorSpaceTimelineGamma")
    color_use_bgr_pixel_order_for_dpx: bool = Field(..., alias="colorUseBGRPixelOrderForDPX")
    color_use_contrast_s_curve: bool = Field(..., alias="colorUseContrastSCurve")
    color_use_legacy_log_grades: conint(ge=1, le=2) = Field(..., alias="colorUseLegacyLogGrades")
    color_use_local_versions_as_default: bool = Field(..., alias="colorUseLocalVersionsAsDefault")
    color_use_stereo_convergence_for_effects: bool = Field(..., alias="colorUseStereoConvergenceForEffects")
    color_version1_name: str = Field(..., alias="colorVersion1Name")
    color_version2_name: str = Field(..., alias="colorVersion2Name")
    color_version3_name: str = Field(..., alias="colorVersion3Name")
    color_version4_name: str = Field(..., alias="colorVersion4Name")
    color_version5_name: str = Field(..., alias="colorVersion5Name")
    color_version6_name: str = Field(..., alias="colorVersion6Name")
    color_version7_name: str = Field(..., alias="colorVersion7Name")
    color_version8_name: str = Field(..., alias="colorVersion8Name")
    color_version9_name: str = Field(..., alias="colorVersion9Name")
    color_version10_name: str = Field(..., alias="colorVersion10Name")
    graphics_white_level: conint(ge=100, le=4000) = Field(..., alias="graphicsWhiteLevel")
    hdr10_plus_controls_on: bool = Field(..., alias="hdr10PlusControlsOn")
    hdr_dolby_controls_on: bool = Field(..., alias="hdrDolbyControlsOn")
    hdr_dolby_master_display: str = Field(..., alias="hdrDolbyMasterDisplay")
    hdr_dolby_version: Literal["4.0", "2.9"] = Field(..., alias="hdrDolbyVersion")
    hdr_mastering_luminance_max: conint(ge=100, le=10000) = Field(..., alias="hdrMasteringLuminanceMax")
    hdr_mastering_on: bool = Field(..., alias="hdrMasteringOn")
    image_deinterlace_quality: Literal["high", "normal"] = Field(..., alias="imageDeinterlaceQuality")
    image_enable_field_processing: bool = Field(..., alias="imageEnableFieldProcessing")
    image_motion_estimation_mode: Literal["enhancedBetter", "enhancedFaster", "standardFaster", "standardBetter"] = Field(..., alias="imageMotionEstimationMode")
    image_motion_estimation_range: Literal["small", "larger", "medium"] = Field(..., alias="imageMotionEstimationRange")
    image_resize_mode: ImageResizeMode = Field(..., alias="imageResizeMode")
    image_resizing_gamma: str = Field(..., alias="imageResizingGamma")
    image_retime_interpolation: Literal["nearest", "frameBlend", "opticalFlow"] = Field(..., alias="imageRetimeInterpolation")
    input_drt: Literal["None", "Simple", "Luminance Mapping", "DaVinci", "Saturation Preserving"] = Field(..., alias="inputDRT")
    input_drt_sat_rolloff_limit: conint(ge=500, le=20000) = Field(..., alias="inputDRTSatRolloffLimit")
    input_drt_sat_rolloff_start: conint(ge=1, le=500) = Field(..., alias="inputDRTSatRolloffStart")
    auto_color_manage: bool = Field(..., alias="isAutoColorManage")
    limit_audio_meter_align_level: conint(ge=-30, le=0) = Field( ..., alias="limitAudioMeterAlignLevel")
    limit_audio_meter_display_mode: Literal["track_source", "post_fader"] = Field(..., alias="limitAudioMeterDisplayMode")
    limit_audio_meter_high_level: conint(ge=-30, le=0) = Field(..., alias="limitAudioMeterHighLevel")
    limit_audio_meter_lufs: str = Field(..., alias="limitAudioMeterLUFS")
    limit_audio_meter_loudness_scale: Literal["ebu_18_scale", "ebu_9_scale"] = Field(..., alias="limitAudioMeterLoudnessScale")
    limit_audio_meter_low_level: conint(ge=-30, le=0) = Field(..., alias="limitAudioMeterLowLevel")
    limit_broadcast_safe_levels: str = Field(..., alias="limitBroadcastSafeLevels")
    limit_broadcast_safe_on: bool = Field(..., alias="limitBroadcastSafeOn")
    limit_subtitle_cpl: str = Field(..., alias="limitSubtitleCPL")
    limit_subtitle_caption_duration_sec: conint(ge=1) = Field(..., alias="limitSubtitleCaptionDurationSec")
    output_drt: str = Field(..., alias="outputDRT")
    output_drt_sat_rolloff_limit: conint(ge=500, le=20000) = Field(..., alias="outputDRTSatRolloffLimit")
    output_drt_sat_rolloff_start: conint(ge=1, le=500) = Field(..., alias="outputDRTSatRolloffStart")
    perf_auto_render_cache_after_time: conint(ge=1, le=30) = Field( ..., alias="perfAutoRenderCacheAfterTime")
    perf_auto_render_cache_composite: bool = Field(..., alias="perfAutoRenderCacheComposite")
    perf_auto_render_cache_enable: bool = Field(..., alias="perfAutoRenderCacheEnable")
    perf_auto_render_cache_fu_effect: bool = Field(..., alias="perfAutoRenderCacheFuEffect")
    perf_auto_render_cache_transition: bool = Field(..., alias="perfAutoRenderCacheTransition")
    perf_cache_clips_location: Path = Field(..., alias="perfCacheClipsLocation")
    perf_optimised_codec: OptimizedCodecs = Field(..., alias="perfOptimisedCodec")
    perf_optimised_media_on: bool = Field(..., alias="perfOptimisedMediaOn")
    perf_optimized_resolution_ratio: Literal["original", "half", "quarter", "one_eighth", "one_sixteenth", "auto"] = Field(..., alias="perfOptimizedResolutionRatio")
    perf_proxy_media_on: bool = Field(..., alias="perfProxyMediaOn")
    perf_proxy_resolution_ratio: Literal["original", "half", "quarter"] = Field(..., alias="perfProxyResolutionRatio")
    perf_render_cache_codec: OptimizedCodecs = Field(..., alias="perfRenderCacheCodec")
    perf_render_cache_mode: Literal["user", "smart", "none"] = Field(..., alias="perfRenderCacheMode")
    rcm_preset_mode: Literal["HDR Rec.2020 Intermediate", "SDR Rec.709"] = Field(..., alias="rcmPresetMode")
    separate_color_space_and_gamma: bool = Field(..., alias="separateColorSpaceAndGamma")
    super_scale_noise_reduction: Literal["Low", "Medium", "High"] = Field(..., alias="superScaleNoiseReduction")
    super_scale_sharpness: Literal["Low", "Medium", "High"] = Field(..., alias="superScaleSharpness")
    timeline_frame_rate_mismatch_behavior: Literal["fcp7", "fcpx", "none", "resolve"] = Field(..., alias="timelineFrameRateMismatchBehavior")
    timeline_input_res_mismatch_custom_preset: str = Field(..., alias="timelineInputResMismatchCustomPreset")
    timeline_input_res_mismatch_use_custom_preset: str = Field(..., alias="timelineInputResMismatchUseCustomPreset")
    timeline_output_res_mismatch_custom_preset: str = Field(..., alias="timelineOutputResMismatchCustomPreset")
    timeline_output_res_mismatch_use_custom_preset: bool = Field(..., alias="timelineOutputResMismatchUseCustomPreset")
    timeline_playback_frame_rate: str = Field(..., alias="timelinePlaybackFrameRate")
    timeline_save_thumbs_in_project: bool = Field(..., alias="timelineSaveThumbsInProject")
    timeline_working_luminance: int = Field(..., alias="timelineWorkingLuminance")
    timeline_working_luminance_mode: str = Field(..., alias="timelineWorkingLuminanceMode")
    use_ca_transform: bool = Field(..., alias="useCATransform")
    use_color_space_aware_grading_tools: bool = Field(..., alias="useColorSpaceAwareGradingTools")
    use_inverse_drt: bool = Field(..., alias="useInverseDRT")
    video_capture_codec: CaptureCodecs = Field(..., alias="videoCaptureCodec")
    video_capture_format: Literal["mov", "dpx"] = Field(..., alias="videoCaptureFormat")
    video_capture_ingest_handles: conint(ge=0, le=9999) = Field(..., alias="videoCaptureIngestHandles")
    video_capture_location: Path = Field(..., alias="videoCaptureLocation")
    video_capture_mode: Literal["video_only", "video_audio"] = Field(..., alias="videoCaptureMode")
    video_deck_add32_pulldown: bool = Field(..., alias="videoDeckAdd32Pulldown")
    video_deck_bit_depth: str = Field(..., alias="videoDeckBitDepth")
    video_deck_format: str = Field(..., alias="videoDeckFormat")
    video_deck_non_auto_edit_frames: bool = Field(..., alias="videoDeckNonAutoEditFrames")
    video_deck_output_sync_source: str = Field(..., alias="videoDeckOutputSyncSource")
    video_deck_preroll_sec: conint(ge=2, le=8) = Field(..., alias="videoDeckPrerollSec")
    video_deck_sdi_configuration: str = Field(..., alias="videoDeckSDIConfiguration")
    video_deck_use444_sdi: bool = Field(..., alias="videoDeckUse444SDI")
    video_deck_use_auto_edit: bool = Field(..., alias="videoDeckUseAudoEdit")
    video_deck_use_stereo_sdi: bool = Field(..., alias="videoDeckUseStereoSDI")
    video_playout_audio_frames_offset: conint(ge=0, le=99) = Field(..., alias="videoPlayoutAudioFramesOffset")
    video_playout_batch_head_duration: conint(ge=0, le=99) = Field( ..., alias="videoPlayoutBatchHeadDuration")
    video_playout_batch_tail_duration: conint(ge=0, le=99) = Field(..., alias="videoPlayoutBatchTailDuration")
    video_playout_ltc_frames_offset: conint(ge=0, le=20) = Field( ..., alias="videoPlayoutLTCFramesOffset")
    video_playout_mode: Literal["video_only", "audio_only", "video_audio"] = Field(..., alias="videoPlayoutMode" )
    video_playout_show_ltc: bool = Field(..., alias="videoPlayoutShowLTC")
    video_playout_show_source_timecode: bool = Field(..., alias="videoPlayoutShowSourceTimecode")


class CommonSettings(BaseConfig):
    super_scale: Literal["auto", "no_scaling", "2x", "3x", "4x"] = Field(..., alias="superScale")
    timeline_drop_frame_timecode: bool = Field(..., alias="timelineDropFrameTimecode")
    timeline_frame_rate: float = Field(..., alias="timelineFrameRate")
    timeline_input_res_mismatch_behavior: Literal["centerCrop", "scaleToCrop", "scaleToFit", "stretch"] = Field(..., alias="timelineInputResMismatchBehavior")
    timeline_interlace_processing: bool = Field(..., alias="timelineInterlaceProcessing")
    timeline_output_pixel_aspect_ratio: Literal["square", "cinemascope"] = Field(..., alias="timelineOutputPixelAspectRatio")
    timeline_output_res_match_timeline_res: bool = Field(..., alias="timelineOutputResMatchTimelineRes")
    timeline_output_res_mismatch_behavior: Literal["centerCrop", "scaleToCrop", "scaleToFit", "stretch"] = Field(..., alias="timelineOutputResMismatchBehavior")
    timeline_output_resolution_height: conint(ge=1) = Field(..., alias="timelineOutputResolutionHeight")
    timeline_output_resolution_width: conint(ge=1) = Field(..., alias="timelineOutputResolutionWidth")
    timeline_pixel_aspect_ratio: Literal["square", "cinemascope"] = Field(..., alias="timelinePixelAspectRatio")
    timeline_resolution_height: conint(ge=1) = Field(..., alias="timelineResolutionHeight")
    timeline_resolution_width: conint(ge=1) = Field(..., alias="timelineResolutionWidth")
    video_data_levels: Literal["Video", "Full"] = Field(..., alias="videoDataLevels")
    video_data_levels_retain_subblock_and_super_white_data: bool = Field(..., alias="videoDataLevelsRetainSubblockAndSuperWhiteData")
    video_monitor_bit_depth: int = Field(..., alias="videoMonitorBitDepth")
    video_monitor_format: str = Field(..., alias="videoMonitorFormat")
    video_monitor_matrix_override_for422_sdi: Literal["Rec.2020", "Rec.709", "Rec.601"] = Field(..., alias="videoMonitorMatrixOverrideFor422SDI")
    video_monitor_sdi_configuration: Literal["quad_link", "dual_link", "single_link"] = Field(..., alias="videoMonitorSDIConfiguration")   
    video_monitor_scaling: Literal["bilinear", "basic"] = Field(..., alias="videoMonitorScaling")
    video_monitor_use444_sdi: bool = Field(..., alias="videoMonitorUse444SDI")
    video_monitor_use_hdr_over_hdmi: bool = Field(..., alias="videoMonitorUseHDROverHDMI")
    video_monitor_use_level_a: bool = Field(..., alias="videoMonitorUseLevelA")
    video_monitor_use_matrix_override_for422_sdi: bool = Field(..., alias="videoMonitorUseMatrixOverrideFor422SDI")
    video_monitor_use_stereo_sdi: bool = Field(..., alias="videoMonitorUseStereoSDI")
    
    @validator('super_scale', pre=True)
    def superscale_validator(cls, value, field):
        return super_scale_reverse(value)
    
# class TimelineUniqueSettings(CommonSettings):

#     use_custom_settings: bool = Field( ..., alias="useCustomSettings")



class _ProjectSettings(CommonSettings, ProjectUniqueSettings):
    pass    




class ProjectSettings(_ProjectSettings):
    class Config:
    # arbitrary_types_allowed = True
        validate_assignment = True
        allow_population_by_field_name = True

    @validator("*", allow_reuse=True)
    def test_validator(cls, value, field):
        call = SETTINGS_MAP[field.alias]
        return set_setting(field.alias, call(value))





a = _ProjectSettings.parse_obj(resolve.project.get_setting(None))
data = a.dict()
b = ProjectSettings.construct(**data)
